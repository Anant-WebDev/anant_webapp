// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  roll_number Int @unique
  name String
  password String
  branch branch_options?
  batch String?
  position position_options?
  club_dept club_dept_options[]
  joined DateTime @default(now())
  imageURL String?
  notices Notice[]    @relation(name:"notice-posted")
  meetings_conducted Meeting[]    @relation(name:"meeting-host")
  meetings_attended Meeting[] @relation(name:"meeting-attended")

  // Orders placed by the user
  orders Order[] @relation(name: "orders-placed")

  //payment verification
  adminVerification AdminVerification[] @relation(name: "verified_by")
}

model Notice{
  notice_id String @id @default(uuid())
  headline String
  body String
  postedOn DateTime  @default(now())
  category notice_cat
  userID String
  postedBy User @relation(name: "notice-posted",fields: [userID], references: [id])
}

model Meeting{
  meeting_id String @id @default(uuid())
  venue String
  starts DateTime
  duration Int?
  topic_of_discussion String?
  hostID String
  conductor User @relation(name: "meeting-host", fields: [hostID], references: [id])
  attendees User[] @relation(name:"meeting-attended")
}

model Workshop{
  workshop_id String @id @default(uuid())
  conductors String[]
  details String
  fee Int?
}

// teams (team_id, team_name, team_member_mailid)
// workshop-participation(workshop_id, team_id/user_id, team_event(Y?N))

enum branch_options{
  AIML
  MNC
  MSC
  CSE
  IT
}

enum position_options{
  Member
  Coordinator
  Secretary
  InCharge
  President
}

enum club_dept_options{
  General
  Tech
  PR
}

enum notice_cat{
  General
  Technical
  Sponsorship
}

// Merchandise table

model Merchandise {
  item_id      Int      @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  stock_quantity Int
  category     item_category
  image_url    String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  orderItems   OrderItem[]
}

model Order {
  order_id      Int       @id @default(autoincrement())
  user_id       String     
  total_price   Float
  status        order_status  @default(PENDING)
  payment_method String?  // UPI, BANK_TRANSFER, etc.
  transaction_id String?
  created_at    DateTime  @default(now())

  user          User     @relation(fields: [user_id], references: [id], name: "orders-placed")
  orderItems    OrderItem[]

  adminVerification AdminVerification? 
}


model OrderItem {
  order_item_id Int    @id @default(autoincrement())
  order_id      Int
  item_id       Int
  quantity      Int
  price_per_item Float

  order         Order     @relation(fields: [order_id], references: [order_id])
  merchandise   Merchandise @relation(fields: [item_id], references: [item_id])
}


model AdminVerification {
  verification_id Int      @id @default(autoincrement())
  order_id        Int      @unique
  admin_id        String
  status          String  // APPROVED, REJECTED
  remarks         String?
  verified_at     DateTime @default(now())

  order           Order    @relation(fields: [order_id], references: [order_id])
  user            User    @relation(fields: [admin_id], references: [id] , name: "verified_by")
}

enum category {
  General
  Technical
  Sponsorship
}
enum order_status {
  PENDING
  APPROVED
  REJECTED
}

enum item_category {
  Apparel
  Accessories
  Stationery
  Gadgets
  Books
}
